//
// File: data_filter.cpp
//
// MATLAB Coder version            : 2.8
// C/C++ source code generated on  : 24-Nov-2016 16:51:51
//

// Include Files
#include "rt_nonfinite.h"
#include "data_filter.h"
#include "data_filter_emxutil.h"

// Function Definitions

//
// Arguments    : const emxArray_real_T *M
//                emxArray_real_T *data_out
// Return Type  : void
//
void data_filter(const emxArray_real_T *M, emxArray_real_T *data_out)
{
  int nA;
  int nC;
  emxArray_real_T *ycenter;
  int jA2;
  int jC;
  double s;
  int i0;
  int k;
  static const double dv0[15] = { 0.046439628482971354, -0.061919504643962807,
    -0.063586568230530868, -0.0035722791140747031, 0.081296412565762338,
    0.16237632336703528, 0.21920803654549761, 0.2395159020546016,
    0.21920803654549784, 0.1623763233670355, 0.081296412565762519,
    -0.003572279114074736, -0.063586568230531174, -0.0619195046439631,
    0.046439628482971979 };

  double b[15];
  double b_M[15];
  double a[7];
  double b_a[7];
  static const double c_a[105] = { -0.033204334365326646, 0.056191950464396644,
    0.026393188854490098, -0.025077399380804239, -0.049458204334365409,
    -0.034829721362229143, 0.0058049535603708373, 0.056191950464396151,
    -0.088544891640866347, -0.050619195046439233, 0.030650154798761809,
    0.079411764705882112, 0.069659442724458051, 0.011609907120742884,
    0.026393188854489425, -0.050619195046439185, -0.0174863062633959,
    0.030650154798761705, 0.04752917361276477, 0.024112884020004732,
    -0.023070969278399588, -0.02507739938080486, 0.030650154798761778,
    0.030650154798761708, 0.0031436056203859447, -0.028649678494879677,
    -0.047035008335317853, -0.040366753989044976, -0.049458204334365548,
    0.07941176470588221, 0.047529173612764992, -0.028649678494879531,
    -0.080076966377275779, -0.076170733291476209, -0.015872285609127713,
    -0.034829721362229511, 0.069659442724457926, 0.024112884020004773,
    -0.047035008335317728, -0.0761707332914761, -0.040594080841758758,
    0.0493894650241399, 0.0058049535603711148, 0.011609907120742705,
    -0.023070969278399696, -0.040366753989044886, -0.01587228560912753,
    0.049389465024140017, 0.13700502284093607, 0.046439628482971909,
    -0.061919504643963112, -0.063586568230531215, -0.0035722791140747911,
    0.081296412565762477, 0.16237632336703547, 0.21920803654549778,
    0.059984520123839036, -0.10913312693498464, -0.064747558942605518,
    0.061324124791616925, 0.18417534477905989, 0.25777241334516876,
    0.26691690662278894, 0.030185758513932105, -0.0928792569659442,
    -0.003274589187901971, 0.14467730412002838, 0.2589090476087379,
    0.29770075126112272, 0.2577724133451687, -0.036455108359132869,
    0.0057275541795668095, 0.12304715408430582, 0.22869730888306727,
    0.27788921604711059, 0.25890904760873784, 0.18417534477905984,
    -0.098761609907120573, 0.17368421052631611, 0.28371040723981927,
    0.2869254584424864, 0.22869730888306733, 0.14467730412002838,
    0.061324124791616821, -0.068962848297213761, 0.35247678018575879,
    0.40382829245058383, 0.28371040723981922, 0.12304715408430582,
    -0.0032745891879021436, -0.064747558942605657, 0.19922600619195022,
    0.42445820433436543, 0.35247678018575884, 0.17368421052631625,
    0.005727554179566904, -0.092879256965944387, -0.10913312693498484,
    0.92252321981424168, 0.19922600619195016, -0.068962848297213719,
    -0.098761609907120615, -0.0364551083591327, 0.030185758513931876,
    0.059984520123838675 };

  static const double d_a[105] = { 0.059984520123838106, 0.030185758513931817,
    -0.036455108359133126, -0.09876160990712024, -0.068962848297212734,
    0.19922600619195061, 0.9225232198142399, -0.1091331269349846,
    -0.09287925696594411, 0.0057275541795665484, 0.17368421052631594,
    0.35247678018575873, 0.42445820433436543, 0.19922600619195102,
    -0.064747558942605268, -0.0032745891879016236, 0.1230471540843058,
    0.283710407239819, 0.40382829245058349, 0.35247678018575868,
    -0.06896284829721254, 0.061324124791617057, 0.14467730412002858,
    0.22869730888306727, 0.28692545844248618, 0.283710407239819,
    0.173684210526316, -0.09876160990712006, 0.1841753447790597,
    0.25890904760873779, 0.27788921604711053, 0.22869730888306727,
    0.12304715408430587, 0.0057275541795667193, -0.036455108359133091,
    0.25777241334516843, 0.29770075126112244, 0.25890904760873779,
    0.14467730412002858, -0.0032745891879017437, -0.0928792569659442,
    0.030185758513931314, 0.26691690662278861, 0.25777241334516837,
    0.18417534477905975, 0.061324124791617085, -0.0647475589426052,
    -0.10913312693498452, 0.059984520123838064, 0.21920803654549761,
    0.1623763233670352, 0.08129641256576231, -0.0035722791140747104,
    -0.063586568230530952, -0.061919504643962939, 0.046439628482971181,
    0.13700502284093607, 0.049389465024139857, -0.015872285609127686,
    -0.040366753989044935, -0.023070969278399557, 0.011609907120742882,
    0.0058049535603708641, 0.049389465024140058, -0.040594080841758785,
    -0.076170733291476181, -0.047035008335317853, 0.024112884020004777,
    0.069659442724458065, -0.034829721362229248, -0.015872285609127526,
    -0.076170733291476153, -0.080076966377275752, -0.028649678494879666,
    0.04752917361276493, 0.079411764705882265, -0.049458204334364937,
    -0.040366753989044823, -0.047035008335317818, -0.028649678494879517,
    0.0031436056203858771, 0.030650154798761625, 0.030650154798761653,
    -0.02507739938080418, -0.02307096927839964, 0.024112884020004711,
    0.047529173612765103, 0.030650154798761674, -0.017486306263395909,
    -0.050619195046439518, 0.026393188854489914, 0.011609907120742877,
    0.069659442724457774, 0.079411764705882348, 0.030650154798761708,
    -0.050619195046439476, -0.08854489164086668, 0.056191950464396352,
    0.005804953560371179, -0.034829721362229754, -0.04945820433436543,
    -0.02507739938080487, 0.026393188854489338, 0.0561919504643962,
    -0.033204334365326174 };

  nA = M->size[0];
  if (M->size[0] < 14) {
    nC = 0;
  } else {
    nC = M->size[0] - 14;
  }

  emxInit_real_T(&ycenter, 1);
  jA2 = ycenter->size[0];
  ycenter->size[0] = nC;
  emxEnsureCapacity((emxArray__common *)ycenter, jA2, (int)sizeof(double));
  if ((M->size[0] == 0) || (nC == 0)) {
    jA2 = ycenter->size[0];
    ycenter->size[0] = nC;
    emxEnsureCapacity((emxArray__common *)ycenter, jA2, (int)sizeof(double));
    for (jA2 = 0; jA2 < nC; jA2++) {
      ycenter->data[jA2] = 0.0;
    }
  } else {
    for (jC = 15; jC - 14 <= nC; jC++) {
      if (nA <= jC) {
        jA2 = nA;
      } else {
        jA2 = jC;
      }

      s = 0.0;
      if (15 < jC + 1) {
        i0 = jC;
      } else {
        i0 = 15;
      }

      for (k = i0 - 14; k <= jA2; k++) {
        s += M->data[k - 1] * dv0[jC - k];
      }

      ycenter->data[jC - 15] = s;
    }
  }

  jC = M->size[0] - 1;
  for (jA2 = 0; jA2 < 15; jA2++) {
    b[jA2] = M->data[jC - jA2];
  }

  for (jA2 = 0; jA2 < 15; jA2++) {
    b_M[jA2] = M->data[14 - jA2];
  }

  for (jA2 = 0; jA2 < 7; jA2++) {
    a[jA2] = 0.0;
    for (jC = 0; jC < 15; jC++) {
      a[jA2] += c_a[jA2 + 7 * jC] * b_M[jC];
    }

    b_a[jA2] = 0.0;
    for (jC = 0; jC < 15; jC++) {
      b_a[jA2] += d_a[jA2 + 7 * jC] * b[jC];
    }
  }

  jA2 = data_out->size[0];
  data_out->size[0] = 14 + ycenter->size[0];
  emxEnsureCapacity((emxArray__common *)data_out, jA2, (int)sizeof(double));
  for (jA2 = 0; jA2 < 7; jA2++) {
    data_out->data[jA2] = a[jA2];
  }

  jC = ycenter->size[0];
  for (jA2 = 0; jA2 < jC; jA2++) {
    data_out->data[jA2 + 7] = ycenter->data[jA2];
  }

  for (jA2 = 0; jA2 < 7; jA2++) {
    data_out->data[(jA2 + ycenter->size[0]) + 7] = b_a[jA2];
  }

  emxFree_real_T(&ycenter);
}

//
// File trailer for data_filter.cpp
//
// [EOF]
//
